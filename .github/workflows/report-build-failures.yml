name: Report IB Build Failures

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  issues: write
  contents: read
  actions: read

jobs:
  report-failures:
    runs-on: ubuntu-latest
    steps:
      - name: Get the last two runs of "Test Multi-Job Workflow" workflow
        id: get_runs
        uses: actions/github-script@v7
        with:
          script: |
            const workflowName = 'Test Multi-Job Workflow';
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Get the workflows in the repo
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner,
              repo
            });

            // Find the workflow ID for "Test Multi-Job Workflow"
            const workflow = workflows.data.workflows.find(wf => wf.name === workflowName);
            if (!workflow) {
              core.setFailed(`Workflow "${workflowName}" not found.`);
              return;
            }
            const workflow_id = workflow.id;

            // Get the last two workflow runs
            const runsResponse = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id,
              per_page: 2,
            });
            const runs = runsResponse.data.workflow_runs;
            if (runs.length < 2) {
              core.setFailed('Not enough workflow runs found.');
              return;
            }
            // Output the run IDs
            core.setOutput('run_id1', runs[0].id);
            core.setOutput('run_id2', runs[1].id);

      - name: Get failed jobs from the last two runs ending with "-ib"
        id: get_failed_jobs
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const run_id1 = ${{ steps.get_runs.outputs.run_id1 }};
            const run_id2 = ${{ steps.get_runs.outputs.run_id2 }};

            // Function to get failed jobs ending with "-ib"
            async function getFailedJobs(run_id) {
              const jobsResponse = await github.rest.actions.listJobsForWorkflowRun({
                owner,
                repo,
                run_id,
                per_page: 200,
              });
              const jobs = jobsResponse.data.jobs;
              const failedJobs = jobs.filter(job => {
                return job.conclusion === 'failure' && job.name.endsWith('-ib');
              });
              return failedJobs.map(job => job.name);
            }

            const failedJobs1 = await getFailedJobs(run_id1);
            const failedJobs2 = await getFailedJobs(run_id2);

            // Find jobs that failed in both runs
            const failedInBoth = failedJobs1.filter(job => failedJobs2.includes(job));
            core.setOutput('failed_jobs', failedInBoth.join(','));

      - name: Report jobs failed in last two runs
        if: steps.get_failed_jobs.outputs.failed_jobs != ''
        run: |
          echo "Jobs failed in both of the last two runs: ${{ steps.get_failed_jobs.outputs.failed_jobs }}"

      - name: Create issues for failed jobs
        uses: actions/github-script@v7
        with:
        script: |
            const failedJobs = 'job3-ib,job1-ib'.split(',').map(job => job.trim());
            const owner = context.repo.owner;
            const repo = context.repo.repo;
    
            for (const jobName of failedJobs) {
            // Check if an open issue exists for this job
            const { data: issues } = await github.rest.issues.listForRepo({
                owner,
                repo,
                state: 'open',
                labels: jobName,  // Filter issues with the label matching the job name
                per_page: 100,
            });
    
            const existingIssue = issues.find(issue => issue.title.includes(jobName));
    
            if (!existingIssue) {
                // Create a new issue
                const issueTitle = `ðŸš¨ Build Failure: ${jobName}`;
                const issueBody = `The job **${jobName}** has failed consecutively in the last two runs of the **Test Multi-Job Workflow** workflow.
    
    Please investigate the cause of the failure and take necessary actions to fix it.
    
    ### Failed Job Details:
    
    - **Workflow**: [Test Multi-Job Workflow](../../actions/workflows/test-multi-job-workflow.yml)
    - **Job Name**: ${jobName}
    
    <sub>_This issue was automatically generated by the [Report IB Build Failures](../../actions/workflows/report-ib-build-failures.yml) workflow._</sub>
                `;
    
                await github.rest.issues.create({
                owner,
                repo,
                title: issueTitle,
                body: issueBody,
                labels: ['failure', jobName],
                });
    
                console.log(`Created issue for ${jobName}`);
            } else {
                console.log(`An open issue already exists for ${jobName}: #${existingIssue.number}`);
            }
            }
    